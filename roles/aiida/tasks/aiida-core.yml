- name: Install DB and more
  become: true
  apt:
      name: "{{ item }}"
      state: present
  with_items:
    # Compilation
    - postgresql-9.5
    - postgresql-contrib
    - python-psycopg2
    - libpq-dev
    # Needed for the ASE visualizer
    - python-gtk2
    # For AiiDA
    - libffi-dev
    - libssl-dev
    - graphviz

- name: Setup postgres db
  become: True
  become_user: postgres
  postgresql_db:
    name: "{{ postgres_db }}"

- name: Setup postgres user
  become: True
  become_user: postgres
  postgresql_user:
    db: "{{ postgres_db }}"
    name: "{{ postgres_user }}"
    password: "{{ postgres_pw }}"

# Note: this installs also a number of plugins. However at the moment,
# for the case of the quantum espresso plugin, we later force a specific
# version (for the others, e.g. aiida-ase etc., not yet - note that the
# dependency int he meta package is >= for these plugins).
- name: Install the aiida meta package
  pip:
    name: "aiida=={{ aiida_version }}"
    virtualenv: "{{ aiida_venv }}"
  register: pip_install

# this is necessary, since the meta package installs plugins
- name: run reentry scan
  shell: "{{ aiida_venv }}/bin/reentry scan -r aiida"
  when: pip_install.changed

- name: Install extras of aiida-core
  pip:
    name: "aiida-core[{{ item }}]=={{ aiida_version }}"
    virtualenv: "{{ aiida_venv }}"
  with_items: "{{ aiida_extras }}"

- name: Additional pip dependencies
  pip:
      name: "{{ item }}"
      virtualenv: "{{ aiida_venv }}"
  with_items:
    - seekpath

## PyGTK cannot be installed with pip... we need to use 
## a workaround, see https://stackoverflow.com/questions/12830662/
- name: workaround to install pygtk 2 inside the virtualenv [making dir]
  file:
    path: "{{ aiida_venv }}/lib/python2.7/dist-packages/"
    state: "directory"
    mode: 0755

- name: workaround to install pygtk 2 inside the virtualenv [creating symlinks]
  file:
    src: "/usr/lib/python2.7/dist-packages/{{ item }}"
    dest: "{{ aiida_venv }}/lib/python2.7/dist-packages/{{ item }}"
    state: link
  with_items:
    - glib
    - gobject
    - gtk-2.0
    - pygtk.pth
    - pygtk.py
    - cairo

# get anyway the GIT code, it is often useful; checkout the same version
- name: Get the AiiDA code from GIT
  git:
    repo: 'https://github.com/aiidateam/aiida_core.git'
    dest: "{{ ansible_env.HOME }}/codes/aiida_core"
    version: "v{{ aiida_version }}"

- name: "Activate TAB completion in virtualenv"
  lineinfile: 
    path: "{{ aiida_venv }}/bin/activate"
    line: 'eval "$(verdi completioncommand)"'

- name: "Check if AiiDA has already been configured"
  stat: path="{{ ansible_env.HOME }}/.aiida/config.json"
  register: aiida_config_file

- name: "Configure AiiDA"
  # Need to use the full path because it's in a virtualenv
  shell: |
       {{ aiida_venv }}/bin/verdi setup default --non-interactive \
       --email aiida@localhost \
       --backend django \
       --db_host localhost --db_port 5432 \
       --db_name {{ postgres_db }} \
       --db_user {{ postgres_user }} --db_pass '{{ postgres_pw }}' \
       --repo {{ ansible_env.HOME }}/.aiida/repository-aiida/
  when: aiida_config_file.stat.exists == False

# TODO: change this 'when' condition: this might create problems
# if there's an error between the previous task and this one
- name: "Set the default AiiDA profile"
  shell: |
        {{ aiida_venv }}/bin/verdi profile setdefault verdi default
        {{ aiida_venv }}/bin/verdi profile setdefault daemon default
  when: aiida_config_file.stat.exists == False

- import_role:
    name: release_notes
  vars:
    section: "AiiDA"
    option: "version"
    value: "{{ aiida_version }}"
  when: release_notes

- import_role:
    name: release_notes
  vars:
    section: "AiiDA"
    option: "usage"
    value: >-
        AiiDA is installed in a virtual environment. 
        Type 'workon aiida' to get access to the 'verdi' commands.
  when: release_notes
